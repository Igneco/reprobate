rimweb:
 - two pain view
 - only show backlog in phv
 - links to specific queries
 - bookmark queries
 - support search/type-ahead (livetextbox)
 - make it a hybrid text and html app
 - show tags and releases browser somewhere
---
tip: console is a bit like a scaffold, it's a good starting point for the ui
---
make it possible to block/unblock a thing - in red - which operand to use? make it an option string /reason (, or %)
---
now that tracking is disabled, make it possible to see history for an item
e.g. rim 64
---
also make it possible to free text search history
e.g. rim ; for history query
both are simple queries over the (token-filtered-tracking)
---
... need to make the priotisation sessions easier
when updating items on the backlog e.g. tagging, show the backlog
when updating items on the ^, show the ^ ... hmmm
---
think about limiting WIP
---
//ultimately rim : [tag] might want to be sorted by status and not broken down by status
//consider a colour blob next to the status (like a rag status), could be round or reverse video
//bar chart of progress
//http://codegolf.stackexchange.com/questions/23350/ascii-art-pie-chart
//todo: could do burn down!
//rim burn
//rim stats

//after talking with stu/tom/albert
//stu: would be good to answer things like: how long a card took?
//tom: how long has a card been in state x? or put another way: elasped time vs time actually worked on
//tom: limit size of backlog so that it gets pruned - refuse to add unless we delete something (limits could be configurable)
//maybe how long between releases
//if we have the start date then we can work out a blunt time per card
//even better if we capture when things change state
//so: we could store a state history ... i.e. when status changes record what is was an when
//record for now and analyse later

//maybe show the backlog when: (or maybe not)
//rim +/ mooo

//consider capturing who created an issue and indicate with +FR on certain views

//in "rim : [tag]" should show who did it ... and optionally support _ spartan mode
//ocd the id padding ...

//show counts for
//rim .
//rim ?
//in "rim : [tag]" colorise the statuses ... then no need to break down

//colourise help

//collect stats on command usage

//annoying issues:
//rim = should parse tags

//TIP: http://www.chriswrites.com/how-to-type-common-symbols-and-special-characters-in-os-x/

//tags:
//Franck: tag many: `rim ref1 ref2 â€¦ refN : foo bar baz`
//tags should be [a-z0-9\-]

//operations to support on many:
//rim 1 2 N .
//rim 1 2 N :
//rim 1 2 N :-

//colouring: (orange = updated, cyan = me, ? = context)

//gaps:
//properly support multiple / in /// and +///
//properly support multiple . in ...

//dates: (not yet)
//store when released (eek, data change - so make it an option)
//show how long things have been in certain states
//show stats about akas ... entries, last used etc (top 5)
//show how long since aka X updated rim

//query:
//rim . foo => should maybe search like ? does, but just for the backlog for foo ...
//or maybe not because 'and' might cover it ... although how do you search for no status

//???:
//help should have an 'issues' section for working with multiples on =, : etc
//might be nice to have rim audit (or track) and see the last x items from the history
//how do we handle rim releases getting too long?

//audit stuff
//might be good to capture who added the issue
//might be good to capture who last updated the issue
//actually if we just store the updates by id then we will get that for free
//store only things that result in a change
//rim [ref] history

//FUTURE:
//- private rims
//- grim
//- spartan bubble ui
//- hosted

//SOMEDAY/MAYBE:
//split and merge {}
//in "rim :" - //consider highlighting tags that are only in released, might indicate dead ... but you probably wouldnt delete

//TODO: handle corrupted rim.json
//TODO: protect against empty value
//TODO: discover common keys and present them when updating
//TODO: be careful with aka .. they need to be unique
//TODO: on update, don't show self in list of others and don't show anything if others are empty
//http://stackoverflow.com/questions/287871/print-in-terminal-with-colors-using-python?rq=1
//http://apple.stackexchange.com/questions/74777/echo-color-coding-stopped-working-in-mountain-lion
//http://unix.stackexchange.com/questions/43408/printing-colored-text-using-echo
//e.g. printf '%s \e[0;31m%s\e[0m %s\n' 'Some text' 'in color' 'no more color'
//  def red(value: String) = s"\e[1;31m $value \e[0m"

//TODO: (maybe) support curl
//#MESSAGE="(Foo) Deployed ${VERSION} to ${MACHINE_NAME}"
//#curl --connect-timeout 15 -H "Content-Type: application/json" -d "{\"message\":\"${MESSAGE}\"}" http://localhost:8765/broadcast
//#wget --timeout=15 --no-proxy -O- --post-data="{\"message\":\"${MESSAGE}\"}" --header=Content-Type:application/json "http://localhost:8765/broadcast"
